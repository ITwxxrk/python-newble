# N6_recur.py
# 递归与尾递归

## 在函数内部,可以调用其他函数。
## 如果一个函数在内部调用自身本身,这个函数就是递归函数。

### 举例：
### 计算阶乘n! = 1 x 2 x 3 x ... x n，用函数fact(n)表示

def fact1(n):
	if n == 1:
		return 1
	return n * fact1(n-1)

print(fact1(1))
print(fact1(5))
print(fact1(100))

## 递归函数的优点是定义简单，逻辑清晰。
## 所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。


### 使用递归函数需要注意防止栈溢出。
### 在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。
### 由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。
### 如：print(fact(1000))

## 解决递归调用栈溢出的方法是通过尾递归优化，事实上尾递归和循环的效果是一样的，
## 所以，把循环看成是一种特殊的尾递归函数也是可以的。
## 尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。
## 这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。

def fact2(n):
	return fact_iter(n,1)

def fact_iter(num,product):
	if num == 1:
		return product
	return fact_iter(num - 1 , num * product)	## 逐次乘到product上

print(fact2(5))

### 尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。
### 遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，
### 所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。


## 小结
## 使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。
## 针对尾递归优化的语言可以通过尾递归防止栈溢出。
## 尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。
## Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。


## practice:
## 汉诺塔：move(n,a,b,c)
## 它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，
## 然后打印出把所有盘子从A借助B移动到C的方法

def hanno(n,A,B,C):
	if n == 1:
		print('%s ——> %s' % (A,C))
	else:
		hanno(n-1,A,C,B)
		hanno(1,A,B,C)
		hanno(n-1,B,A,C)
hanno(3,'A','B','C')
